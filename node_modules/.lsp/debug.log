Hello - from /Users/pm/.vscode/extensions/jaredly.reason-vscode-1.7.8/bin.native
Previous log location: /var/folders/7g/pvfrjzrd2t5dgww_kz2gf4s40000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/pm/workspace/piaf/lib/response.ml","languageId":"ocaml","version":1,"text":"(*----------------------------------------------------------------------------\n * Copyright (c) 2019-2020, AntÃ³nio Nuno Monteiro\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met:\n *\n * 1. Redistributions of source code must retain the above copyright notice,\n *    this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright notice,\n *    this list of conditions and the following disclaimer in the documentation\n *    and/or other materials provided with the distribution.\n *\n * 3. Neither the name of the copyright holder nor the names of its\n *    contributors may be used to endorse or promote products derived from\n *    this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *---------------------------------------------------------------------------*)\n\nopen Monads\nmodule Status = H2.Status\n\ntype message =\n  { (* `H2.Status.t` is a strict superset of `Httpaf.Status.t` *)\n    status : Status.t\n  ; headers : Headers.t\n  ; version : Versions.HTTP.t\n  }\n\ntype t =\n  { message : message\n  ; body : Body.t\n  }\n\n(* TODO: Add content-length... *)\nlet create\n    ?(version = Versions.HTTP.v1_1)\n    ?(headers = Headers.empty)\n    ?(body = Body.empty)\n    status\n  =\n  { message = { status; headers; version }; body }\n\nlet of_string ?version ?headers ~body status =\n  create ?version ?headers ~body:(Body.of_string body) status\n\nlet of_bigstring ?version ?headers ~body status =\n  create ?version ?headers ~body:(Body.of_bigstring body) status\n\nlet of_string_stream ?version ?headers ~body status =\n  create ?version ?headers ~body:(Body.of_string_stream body) status\n\nlet of_stream ?version ?headers ~body status =\n  create ?version ?headers ~body:(Body.of_stream body) status\n\nlet of_file ?version ?(headers = Headers.empty) path =\n  let mime = Magic_mime.lookup path in\n  let headers =\n    Headers.(\n      add_unless_exists\n        (add_unless_exists headers \"content-type\" mime)\n        \"transfer-encoding\"\n        \"chunked\")\n  in\n  let stream, push = Lwt_stream.create () in\n  Lwt.async (fun () ->\n      Lwt_io.with_file ~flags:[ O_RDONLY ] ~mode:Lwt_io.input path (fun ic ->\n          let open Lwt.Syntax in\n          (* TODO: Read chunks *)\n          let+ contents = Lwt_io.read ic in\n          push (Some contents);\n          push None));\n  create ?version ~headers ~body:(Body.of_string_stream stream) `OK\n\nlet status { message = { status; _ }; _ } = status\n\nlet headers { message = { headers; _ }; _ } = headers\n\nlet body { body; _ } = body\n\nlet of_message_and_body message body = { message; body }\n\nlet of_http1 ?(body = Body.empty) response =\n  let { Httpaf.Response.status; version; headers; _ } = response in\n  { message =\n      { status = (status :> Status.t)\n      ; headers = H2.Headers.of_rev_list (Httpaf.Headers.to_rev_list headers)\n      ; version\n      }\n  ; body\n  }\n\nlet to_http1 { message = { status; headers; version }; _ } =\n  let http1_headers =\n    Httpaf.Headers.of_rev_list (H2.Headers.to_rev_list headers)\n  in\n  let status =\n    match status with\n    | #Httpaf.Status.t as http1_status ->\n      http1_status\n    | `Misdirected_request ->\n      `Code (H2.Status.to_code status)\n  in\n  Httpaf.Response.create ~version ~headers:http1_headers status\n\nlet of_h2 ?(body = Body.empty) response =\n  let { H2.Response.status; headers } = response in\n  (* Remove this header to make the output compatible with HTTP/1. This is the\n   * only pseudo-header that can appear in HTTP/2.0 responses, and H2 checks\n   * that there aren't others. *)\n  let headers = H2.Headers.remove headers \":status\" in\n  { message = { status; headers; version = { major = 2; minor = 0 } }; body }\n\nlet persistent_connection { message = { version; headers; _ }; _ } =\n  Message.persistent_connection version headers\n\nlet pp_hum formatter { message = { headers; status; version; _ }; _ } =\n  let format_header formatter (name, value) =\n    Format.fprintf formatter \"%s: %s\" name value\n  in\n  Format.fprintf\n    formatter\n    \"@[%a %a@]@\\n@[%a@]\"\n    Versions.HTTP.pp_hum\n    version\n    Status.pp_hum\n    status\n    (Format.pp_print_list\n       ~pp_sep:(fun f () -> Format.fprintf f \"@\\n\")\n       format_header)\n    (Headers.to_list headers)\n"}}}
Found a `dune` file at /Users/pm/workspace/piaf/lib
]] Making a new jbuilder package at /Users/pm/workspace/piaf/lib
=== Project root: /Users/pm/workspace/piaf
Detected `opam` dependency manager for local use
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "Unable to read /Users/pm/workspace/piaf/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":1,"method":"textDocument/documentSymbol","params":{"textDocument":{"uri":"file:///Users/pm/workspace/piaf/lib/response.ml"}}}
[server] Got a method textDocument/documentSymbol
[server] processing took 0.00715255737305ms
Found a `dune` file at /Users/pm/workspace/piaf/lib
]] Making a new jbuilder package at /Users/pm/workspace/piaf/lib
=== Project root: /Users/pm/workspace/piaf
Detected `opam` dependency manager for local use
Sending response {"id": 1, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/pm/workspace/piaf/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","id":2,"method":"textDocument/codeLens","params":{"textDocument":{"uri":"file:///Users/pm/workspace/piaf/lib/response.ml"}}}
[server] Got a method textDocument/codeLens
[server] processing took 0.00905990600586ms
Found a `dune` file at /Users/pm/workspace/piaf/lib
]] Making a new jbuilder package at /Users/pm/workspace/piaf/lib
=== Project root: /Users/pm/workspace/piaf
Detected `opam` dependency manager for local use
Sending response {"id": 2, "jsonrpc": "2.0", "result": [{"range": {"start": {"line": 0, "character": 0}, "end": {"line": 0, "character": 0}}, "command": {"title": "Unable to load compilation data: Unable to read /Users/pm/workspace/piaf/lib/.merlin", "command": ""}}]}
Found a `dune` file at /Users/pm/workspace/piaf/lib
]] Making a new jbuilder package at /Users/pm/workspace/piaf/lib
=== Project root: /Users/pm/workspace/piaf
Detected `opam` dependency manager for local use
Read message 
{"jsonrpc":"2.0","id":3,"method":"textDocument/hover","params":{"textDocument":{"uri":"file:///Users/pm/workspace/piaf/lib/response.ml"},"position":{"line":97,"character":1}}}
[server] Got a method textDocument/hover
[server] processing took 0.014066696167ms
Found a `dune` file at /Users/pm/workspace/piaf/lib
]] Making a new jbuilder package at /Users/pm/workspace/piaf/lib
=== Project root: /Users/pm/workspace/piaf
Detected `opam` dependency manager for local use
Sending response {"id": 3, "jsonrpc": "2.0", "error": {"code": -32603, "message": "Unable to read /Users/pm/workspace/piaf/lib/.merlin"}}
Read message 
{"jsonrpc":"2.0","method":"$/cancelRequest","params":{"id":3}}
